global !p
def complete(t, opts):
    if t:
        opts = [ m[len(t):] for m in opts if m.startswith(t) ]

    if len(opts) == 1:
        return opts[0]

    return "(" + '|'.join(opts) + ")"
endglobal

snippet get "Java Class Getter" !b
/**
 * Get the $1.
 *
 * @return ${2:String}
 * @see    ${3:`!p snip.rv=snip.basename`}#${4:${1/\s(\S)/\u$1/g}}
 */
public $2 get${4/\w+\s*/\u$0/}()
{
    return $4;$5
}
$0
endsnippet

snippet set "Java Class Setter" !b
/**
 * Set the $1.
 *
 * @param  ${2:${1/\s(\S)/\u$1/g}} ${3:The $1}
 *
 * @see    ${4:`!p snip.rv=snip.basename`}#${5:${1/\s(\S)/\u$1/g}}
 * @return $4
 */
public $4 set${5/\w+\s*/\u$0/}(${6:String} $2)
{
    $5 = $2;$7

    return this;
}
$0
endsnippet

snippet gs "Java Class Getter Setter" !b
/**
 * The $1.
 */
private ${2:String} ${3:${1/\s(\S)/\u$1/g}};


/**
 * Get the $1.
 *
 * @return $2
 * @see    ${4:`!p snip.rv=snip.basename`}#$3
 */
public $2 get${3/\w+\s*/\u$0/}()
{
    return $3;
}


/**
 * Set the $1.
 *
 * @param  ${5:new${3/\w+\s*/\u$0/}} ${6:The $1}
 *
 * @see    $4#$3
 * @return $4
 */
public $4 set${3/\w+\s*/\u$0/}($2 $5)
{
    $3 = $5;$7

    return this;
}
$0
endsnippet

snippet new "New class instance" !b
$1 ${2:${1/\w+/\l$0/}} = new $1($3);
$0
endsnippet

snippet try "try/catch block" !b
try {
    ${3:// Code.}
} catch (${1:Exception} ${2:exception}) {
    ${4:// Handle error condition.}
}
endsnippet

snippet tryf "try/catch/finally block" !b
try {
    ${3:// Code.}
} catch (${1:Exception} ${2:exception}) {
    ${4:// Handle error condition.}
} finally {
    ${4:// Cleanup.}
}
endsnippet

snippet /cat(ch)?/ "catch black" !br
catch (${1:Exception} ${2:exception}) {
    $0
}
endsnippet

snippet print "print" !b
System.${3:out}.print(${1:"$2"});
endsnippet

snippet /println?/ "println" !br
System.${3:out}.println(${1:"$2"});
endsnippet

snippet main "main" !b
/**
 * ${1:Main program entry point.}
 *
 * @param args The array of command-line arguments.
 */
public static void main(String[] args)
{
    $2
}



endsnippet

snippet class "Class declaration template" !b
/**
 * ${1:`!p snip.rv=snip.fn.split('.')[0]`.}
 *
 * @since   ${2:`!v strftime("%Y-%m-%d")`}
 * @version ${3:`!v strftime("%Y.%m")`}
 * @author  ${4:`git config --get user.name`} <${5:`git config --get user.email`}>
 */
public class ${6:`!p snip.rv=snip.fn.split('.')[0]`}
{


    /**
     * ${7:Initialize this object instance.}
     */
    public $6()
    {
        ${8:// Code.}
    }


}
endsnippet

snippet /i(nter)?face/ "Interface declaration template" !br
/**
 * ${1:`!p snip.rv=snip.fn.split('.')[0]`.}
 *
 * @since   ${2:`!v strftime("%Y-%m-%d")`}
 * @version ${3:`!v strftime("%Y.%m")`}
 * @author  ${4:`git config --get user.name`} <${5:`git config --get user.email`}>
 */

interface ${6:`!p snip.rv=snip.fn.split('.')[0]`}${7: extends ${8:Parent}}
{


     ${9:// Interface definition.}


}
endsnippet

snippet tests "JUnit test case file template" !b
/**
 * ${1:Test cases for the ${2:`!p snip.rv=snip.fn.split('.')[0]`}.}
 *
 * @since   ${3:`!v strftime("%Y-%m-%d")`}
 * @version ${4:`!v strftime("%Y.%m")`}
 * @author  ${5:`git config --get user.name`} <${6:`git config --get user.email`}>
 */

// Import the JUnit unit testing framework.
import org.junit.Test;
import static org.junit.Assert.*;


/**
 * $1
 *
 * @since   $3
 * @version $4
 * @author  $5 <$6>
 */
public class ${7:`!p snip.rv=snip.fn.split('.')[0]`}
{


    ${8: // Code.}


}
endsnippet

snippet test "JUnit test case" !b
    /**
     * ${1:Verify that...}
     */
    @Test
    public void test$2()
    {
        assertEquals("${3:Describe test assertion}", ${4: true}, ${5: true});
    }



endsnippet

snippet /sw(itch)?/ "Switch Case" !br
switch (${1:var}) {
    case ${2:"value"}:
        ${3:// Code.}
        break;

    default:
        break;
}
endsnippet

snippet case "Case statement" !b
case ${1:condition}:
    ${2:// Code.}
    break;

endsnippet

snippet iif "Inline If" !b
(${1:var}) ?${2: "value" }: ${3:"else"}
endsnippet

snippet /ass(ert)?/ "Assertion" !br
assert ${1:test}${2/(.+)/(?1: \: ")/}${2:Failure message}${2/(.+)/(?1:")/};$0
endsnippet

snippet /br(eak)?/ "Break" !br
break;

$0
endsnippet

snippet /def(ault)?/ "default" !br
default:
    $0
endsnippet

snippet const "Java constant" !b
static public final String ${1:MY_CONST} = "$2";

$0
endsnippet

snippet if "If statement" !b
if ($1) {
    $0
}

endsnippet

snippet ife "If/Else statement" !b
if ($1) {
    $2
} else {
    $3
}

endsnippet

snippet /(} )?else/ "else" !br
else {
    $0
}
endsnippet

snippet elif "else if" !b
else if ($1) {
    $0
}
endsnippet

snippet "} else if" "else if" !b
} else if ($1) {
    $0
}
endsnippet

snippet /fore(ach)?/ "For each statement" !br
for ($1 : $2) {
    $0
}

endsnippet

snippet for "For statement" !b
for ($1; $2; $3) {
    $0
}

endsnippet

snippet /im(port)?/ "import" !br
import $0;
endsnippet

snippet /ext(ends?)?/ "extends" !br
extends $0
endsnippet

snippet /pri?/ "private" !br
private $0
endsnippet

snippet pro "protected" !b
protected $0
endsnippet

snippet /publ?/ "public" !br
public $0
endsnippet

snippet ret "return" !b
return $0;
endsnippet

snippet st "static" !b
static $0
endsnippet

snippet /synch?/ "synchronized" !br
synchronized $0
endsnippet

snippet /abs?/ "abstract" !br
abstract $0
endsnippet

snippet /wh(ile)?/ "while loop" !br
while ($1) {
    ${2:// Code.}
}

endsnippet

snippet /th(r(ow)?)?/ "throw new" !br
throw new ${1:Exception}(${2:"${3:Error message here}"});
endsnippet

snippet fi "final" !b
final $0
endsnippet

snippet /(} )?fin(ally)?/ "finally" !br
} finally {
    $0
}
endsnippet

snippet do "do/while loop" !b
do {
    ${2:// Code.}
} while (${1:condition});

endsnippet

snippet Sys "System" !b
System
endsnippet

# :vim:ft=snippets:
