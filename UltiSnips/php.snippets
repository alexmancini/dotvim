## Snippets from SnipMate, taken from
## https://github.com/scrooloose/snipmate-snippets.git

global !p
import re

def complete(t, opts):
    if t:
        opts = [ m[len(t):] for m in opts if m.startswith(t) ]

    if len(opts) == 1:
        return opts[0]

    return "(" + '|'.join(opts) + ")"

def lower_first(s):
    if len(s) == 0:
        return s
    else:
        return s[0].lower() + s[1:]

def slugify(s):
    return re.sub(r'\w+\s*', "\u$0", s)
endglobal

snippet /g(et)?/ "PHP Class Getter" !br
/**
 * Get the $1.
 *
 * @return ${2:string}
 * @see    ${4:`!p snip.rv=snip.basename`}::${3:$$1}
 */
public function get${1/\w+\s*/\u$0/}()
{
    return $this->$1;$5
}
$0
endsnippet

snippet /s(et)?/ "PHP Class Setter" !br
/**
 * Set the ${1:Something}.
 *
 * @param  ${2:string} ${3:$`!p snip.rv=lower_first(t[1])`}
 *
 * @return ${4:`!p snip.rv=snip.basename`}
 */
public function set${1/\w+\s*/\u$0/}($3)
{
    $this->$1 = $3;$5

    return $this;
}
$0
endsnippet

snippet gs "PHP Class Getter Setter" !b
/**
 * The $1.
 *
 * @param ${2:string}
 */
protected $${3:${1/\s(\S)/\u$1/g}};


/**
 * Get the $1.
 *
 * @return $2
 * @see    ${4:`!p snip.rv=snip.basename`}::$$3
 */
public function get${3/\w+\s*/\u$0/}()
{
    return $this->$3;
}


/**
 * Set the $1.
 *
 * @param  $2 $$3
 *
 * @return $4
 * @see    $4::$$3
 */
public function set${3/\w+\s*/\u$0/}($$3)
{
    $this->$3 = $$3;

    return $this;
}
$0
endsnippet

snippet gsb "PHP Class Getter Setter (boolean)" !b
/**
 * The $1.
 *
 * @param ${2:boolean}
 */
protected $${3:${1/\s(\S)/\u$1/g}};


/**
 * Is the $1?
 *
 * @return $2
 * @see    ${4:`!p snip.rv=snip.basename`}::$$3
 */
public function is${3/\w+\s*/\u$0/}()
{
    return $this->$3;
}


/**
 * Set the $1.
 *
 * @param  $2 $$3
 *
 * @return $4
 * @see    $4::$$3
 */
public function set${3/\w+\s*/\u$0/}($$3)
{
    $this->$3 = $$3 ? TRUE : FALSE;

    return $this;
}
$0
endsnippet

snippet gso "PHP Class Getter Setter (object)" !b
/**
 * The $1.
 *
 * @param ${2:Object}
 */
protected $${3:${1/\s(\S)/\u$1/g}};


/**
 * Get the $1.
 *
 * @return $2
 * @see    ${4:`!p snip.rv=snip.basename`}::$$3
 */
public function get${3/\w+\s*/\u$0/}()
{
    return $this->$3;
}


/**
 * Set the $1.
 *
 * @param  $2 $$3
 *
 * @return $4
 * @see    $4::$$3
 */
public function set${3/\w+\s*/\u$0/}($2 \$${4:`!p snip.rv=lower_first(t[3])`})
{
    $this->$3 = $$3;

    return $this;
}
$0
endsnippet

snippet /n(ew)?/ "New class instance" !br
$$1 = new ${2:${1/\w*\s*/\u$0/}}($3);
$0
endsnippet

snippet <?= "PHP ShortOpen Echo" !b
<?= ${1:\$var}; ?>
endsnippet

snippet htmle "htmlentities" !b
htmlentities(${1:\$var}, ENT_QUOTES, 'utf-8')
endsnippet

snippet <<< "HEREDOC" !b
<<<${1:HERE}
$1;

endsnippet

snippet try "try/catch blah" !b
try {
    ${3:// Code.}
} catch (${1:Exception} ${2:\$exception}) {
    ${4:// Handle error condition.}
}
endsnippet

snippet class "Class declaration template" !b
/**
 * ${1:`!p snip.rv=snip.fn.split('.')[0]`.}
 *
 * @category    $2
 * @package     $2\\$3
 * @subpackage  $4
 * @author      ${5:`git config --get user.name`} <${6:`git config --get user.email`}>
 * @copyright   `!v strftime("%Y")` ${7:$5} (http://${8:mycompany.com/})
 * @license     $9`!p snip.rv=complete(t[9], ['Apache', 'BSD', 'GNU GPLv2', 'GNU GPLv3', 'MIT', 'Proprietary'])`
 */
class ${10:`!p snip.rv=snip.fn.split('.')[0]`}
{


    /**
     * ${11:Initialize this object instance.}
     *
     * @param ${12:array $options}
     */
    public function ${13:__construct}(${14:$12}${15:=array()})
    {
        ${16:// code}
    }


}
endsnippet

snippet /i(nter)?face/ "Interface declaration template" !br
/**
 * ${1:`!p snip.rv=snip.fn.split('.')[0]`.}
 *
 * @category    $2
 * @package     $2\\$3
 * @subpackage  $4
 * @author      ${5:`git config --get user.name`} <${6:`git config --get user.email`}>
 * @copyright   `!v strftime("%Y")` ${7:$5} (http://${8:mycompany.com/})
 * @license     $9`!p snip.rv=complete(t[9], ['Apache', 'BSD', 'GNU GPLv2', 'GNU GPLv3', 'MIT', 'Proprietary'])`
 */
interface ${1/ //g}
{


    ${10:// Code.}


}
endsnippet

snippet <?php "PHP file template" !b
<?php
/**
 * ${1:`!p snip.rv=snip.fn.split('.')[0]`.}
 *
 * @category    $2
 * @package     $2\\$3
 * @subpackage  $4
 * @author      ${5:`git config --get user.name`} <${6:`git config --get user.email`}>
 * @copyright   `!v strftime("%Y")` ${7:$5} (http://${8:mycompany.com/})
 * @license     $9`!p snip.rv=complete(t[9], ['Apache', 'BSD', 'GNU GPLv2', 'GNU GPLv3', 'MIT', 'Proprietary'])`
 */

/**
 * @namespace
 */
namespace $2\\$3\\$4;


/**
 * $1
 *
 * @category    $2
 * @package     $2\\$3
 * @subpackage  $4
 * @author      $5 <$6>
 * @copyright   `!v strftime("%Y")` $7 (http://$8)
 * @license     $9`!p snip.rv=complete(t[9], ['Apache', 'BSD', 'GNU GPLv2', 'GNU GPLv3', 'MIT', 'Proprietary'])`
 */
class ${10:`!p snip.rv=snip.fn.split('.')[0]`}
{


    /**
     * ${11:Initialize this object instance.}
     *
     * @param ${12:array $options}
     */
    public function ${13:__construct}(${14:$12}${15:=array()})
    {
        ${16:// code}
    }


}
endsnippet

snippet <?phpi "PHP interface file template" !b
<?php
/**
 * ${1:`!p snip.rv=snip.fn.split('.')[0]`.}
 *
 * @category    $2
 * @package     $2\\$3
 * @subpackage  $4
 * @author      ${5:`git config --get user.name`} <${6:`git config --get user.email`}>
 * @copyright   `!v strftime("%Y")` ${7:$5} (http://${8:mycompany.com/})
 * @license     $9`!p snip.rv=complete(t[9], ['Apache', 'BSD', 'GNU GPLv2', 'GNU GPLv3', 'MIT', 'Proprietary'])`
 */

/**
 * @namespace
 */
namespace $2\\$3\\$4;


/**
 * $1
 *
 * @category    $2
 * @package     $2\\$3
 * @subpackage  $4
 * @author      $5 <$6>
 * @copyright   `!v strftime("%Y")` $7 (http://$8)
 * @license     $9`!p snip.rv=complete(t[9], ['Apache', 'BSD', 'GNU GPLv2', 'GNU GPLv3', 'MIT', 'Proprietary'])`
 */
interface ${10:`!p snip.rv=snip.fn.split('.')[0]`}
{


    ${11:// Interface definition.}

}
endsnippet

snippet <?phpt "PHP test case file template" !b
<?php
/**
 * ${1:Test cases for the $13.}
 *
 * @category    $2
 * @package     $2\\${3:Tests}
 * @subpackage  $4
 * @author      ${5:`git config --get user.name`} <${6:`git config --get user.email`}>
 * @copyright   `!v strftime("%Y")` ${7:$5} (http://${8:mycompany.com/})
 * @license     $9`!p snip.rv=complete(t[9], ['Apache', 'BSD', 'GNU GPLv2', 'GNU GPLv3', 'MIT', 'Proprietary'])`
 */

/**
 * @namespace
 */
namespace $2\\$3\\$4;

use ${10:PHPUnit_Framework_TestCase};


/**
 * $1
 *
 * @category    $2
 * @package     $2\\$3
 * @subpackage  $4
 * @author      $5 <$6>
 * @copyright   `!v strftime("%Y")` $7 (http://$8})
 * @license     $9`!p snip.rv=complete(t[9], ['Apache', 'BSD', 'GNU GPLv2', 'GNU GPLv3', 'MIT', 'Proprietary'])`
 * @uses        $10
 */
class ${11:`!p snip.rv=snip.fn.split('.')[0]`} extends $10
{


    /**
     * ${12:Verify that the $13 can be instantiated.}
     *
     * @return ${13:`!p snip.rv=snip.fn.split('.')[0].replace('Test', '')`}
     */
    public function ${14:testCanInstantiate}()
    {
        ${15:${13/\w+\s*/\$\l$0/} = new $13();}

        return ${13/\w+\s*/\$\l$0/};
    }


    /**
     * ${16:Test something.}
     *
     * @param   $13 ${13/\w+\s*/\$\l$0/}
     *
     * @return  $13
     * @depends $14
     */
    public function test${17:Something}($13 ${13/\w+\s*/\$\l$0/})
    {
        ${18:// Code.}

        return ${13/\w+\s*/\$\l$0/};
    }


}
endsnippet

snippet test "test case" !b
/**
 * ${2:Test $1.}
 *
 * @return ${3:`!p snip.rv=snip.fn.split('.')[0].replace('Test', '')`}
 */
public function test${1:Something}()
{
    \$${5:`!p snip.rv=lower_first(t[3])`} = FALSE;

    $0;

    ${4:return \$$5};
}



endsnippet

snippet test1 "test case with 1 dependency" !b
/**
 * ${2:Test $1.}
 *
 * @param   $2 \$$3 The $2 under test.
 *
 * @return  $2
 * @depends ${4:testCanInstantiate}
 */
public function test${1:Something}(${2:`!p snip.rv=snip.fn.split('.')[0].replace('Test', '')`} \$${3:`!p snip.rv=lower_first(t[2])`})
{
    $0

    return \$$3;
}



endsnippet


snippet setUp "PHPUnit setUp method definition" !b
/**
 * Prepare for the test cases.
 *
 * @return void
 */
public function setUp()
{
    $0
}



endsnippet

snippet /sw(itch)?/ "Switch Case" !br
switch (${1:\$var}) {
    case ${2:'value'}:
        ${3:// Code.}
        break;

    default:
        break;
}


endsnippet

snippet case "Case statement" !b
case ${1:\$condition}:
    ${2:// Code.}
    break;

endsnippet

snippet iif "Inline If" !b
(${1:\$var}) ?${2: 'condition' }: ${3:'condition'}
endsnippet

snippet dpr "die(print_r())" !b
die(print_r(${1:\$var}, TRUE));
endsnippet


snippet usedcc "use Doctrine\Common\Collections" !b
use Doctrine\Common\Collections;
endsnippet

snippet useptc "Use PHPUnit_Framework_TestCase" !b
use PHPUnit_Framework_TestCase;
endsnippet

snippet usesc "Use Symfony\Component\"
use Symfony\Component\\$1;
endsnippet

snippet usescc "Use Symfony\Component\Console\"
use Symfony\Component\Console\\$1;
endsnippet

snippet usedcom "Use Doctrine\Common\Persistence\ObjectManager"
use Doctrine\Common\Persistence\ObjectManager;
endsnippet

snippet usedcor "Use Doctrine\Common\Persistence\ObjectRepository"
use Doctrine\Common\Persistence\ObjectRepository;
endsnippet

snippet pubfun "Public function declaration"
public function ${1:someFunction}(${2:array \$options=array()})
{
    ${3:// Code.}
}


endsnippet

snippet profun "Protected function declaration"
protected function ${1:someFunction}(${2:array \$options=array()})
{
    ${3:// Code.}
}


endsnippet

snippet prifun "Private function declaration"
private function ${1:someFunction}(${2:array \$options=array()})
{
    ${3:// Code.}
}


endsnippet

snippet /e(cho)?/ "echo" !br
echo ${1:"${2:message}"};
endsnippet

snippet case "Case statement" !b
case ${1:condition}:
    ${2:// Code.}
    break;

endsnippet

snippet iif "Inline If" !b
(${1:\$var}) ?${2: "value" }: ${3:"else"}
endsnippet

snippet /br(eak)?/ "Break" !br
break;

$0
endsnippet

snippet /def(ault)?/ "default" !br
default:
    $0
endsnippet

snippet if "If statement" !b
if ($1) {
    $0
}

endsnippet

snippet ife "If/Else statement" !b
if ($1) {
    $2
} else {
    $3
}

endsnippet

snippet /(} )?else/ "else" !br
else {
    $0
}
endsnippet

snippet elif "else if" !b
else if ($1) {
    $0
}
endsnippet

snippet /(} )?else if/ "else if" !br
} else if ($1) {
    $0
}
endsnippet

snippet fore "For each statement" !b
foreach ($1 as ${2:x}${ => ${4:y}}) {
    $0
}

endsnippet

snippet for "For statement" !b
for ($1; $2; $3) {
    $0
}

endsnippet

snippet use "use" !b
use $0;
endsnippet

snippet /ext(ends?)?/ "extends" !br
extends $0
endsnippet

snippet /pri?/ "private" !br
private $0
endsnippet

snippet pro "protected" !b
protected $0
endsnippet

snippet /pub(l(ic)?)?/ "public" !br
public $0
endsnippet

snippet /ret(urn)?/ "return" !br
return $0;
endsnippet

snippet st "static" !b
static $0
endsnippet

snippet /abs?/ "abstract" !br
abstract $0
endsnippet

snippet /wh(ile)?/ "while loop" !br
while ($1) {
    ${2:// Code.}
}

endsnippet

snippet /th(r(ow)?)?/ "throw new" !br
throw new ${1:Exception}(${2:"${3:Error message here}"});
endsnippet

snippet /(} )?fin(ally)?/ "finally" !br
} finally {
    $0
}
endsnippet

snippet /inc(l(ude)?)?/ "include" !br
include "${1:file}";
endsnippet

snippet /inc(l(ude)?)?1/ "include_once" !br
include_once "${1:file}";
endsnippet

snippet /req(uire)?/ "require" !br
require "${1:file}";
endsnippet

snippet /req(uire)?1/ "require_once" !br
require_once "${1:file}";
endsnippet

snippet "\$_C" "$_COOKIE superglobal" !b
$_COOKIE['${1:key}']
endsnippet

snippet "\$_E" "$_ENV superglobal" !b
$_ENV['${1:key}']
endsnippet

snippet "\$_F" "$_FILES superglobal" !b
$_FILES['${1:key}']
endsnippet

snippet "\$_G" "$_GET superglobal" !b
$_GET['${1:key}']
endsnippet

snippet "\$_P" "$_POST superglobal" !b
$_POST['${1:key}']
endsnippet

snippet "\$_R" "$_REQUEST superglobal" !b
$_REQUEST['${1:key}']
endsnippet

snippet "\$_S" "$_SESSION superglobal" !b
$_SESSION['${1:key}']
endsnippet

snippet /defi?(ne?)?/ "define" !br
/**
 * ${3:Describe this constant definition.}
 */
define ('$1', ${2:TRUE});

$0
endsnippet

snippet do "do/while loop" !b
do {
    ${2:// Code.}
} while (${1:\$condition});

endsnippet

snippet fun "function" !b
function $0
endsnippet

snippet f "anonymous function" !b
function (${1:array \$params=array()})${2: use (${3:\$var})} {
}
endsnippet

snippet __C "__CLASS" !b
__CLASS__
endsnippet

snippet __D "__DIR__" !b
__DIR__
endsnippet

snippet __F "__FILE__" !b
__FILE__
endsnippet

snippet __FU "__FUNCTION__" !b
__FUNCTION__
endsnippet

snippet __L "__LINE__" !b
__LINE__
endsnippet

snippet __M "__METHOD__" !b
__METHOD__
endsnippet

snippet __T "__TRAIT__" !b
__TRAIT__
endsnippet

snippet /__(c(onstruct)?)?/ "__construct" !br
/**
 * ${1:Construct a new instance of the ${2:`!p snip.rv=snip.basename`} class.}
 */
public function __construct()
{
    ${3:// Code.}
}
endsnippet

snippet /__g(et)?/ "__get" !br
/**
 * Get the value specified by \$name.
 *
 * @param  string \$name The named value to retrieve.
 *
 * @return mixed  The value of the named parameter.
 */
public function __get(\$name)
{
    ${2:return \$this->\$name;}
}



endsnippet

snippet /__s(et)?/ "__set" !br
/**
 * Set the parameter specified by \$name to the given value.
 *
 * @param  string \$name  The named parameter to update.
 * @param  mixed  \$value The value to set.
 *
 * @return ${1:`!p snip.rv=snip.basename`}
 */
public function __set(\$name, \$value)
{
    ${2:\$this->\$name = \$value;}

    return \$this;
}



endsnippet

snippet /\$t(h(is)?)?/ "$this" !br
\$this->
endsnippet

snippet self "self::" !b
self::
endsnippet

snippet /par(ent)?/ "parent::" !br
parent::
endsnippet

# :vim:ft=snippets:
